// migrating hump case as described in Lesser et al., C.E. 51, 2004, 883-915, page 909 
// 

swe {
  
   data_problem         = "LESSER"      

// frictype:  select the friction type
//   = 0 => no friction
//   = 1 => linear friction
//   = 2 => Manning style friction
//    note if frictype=2, need to set dirichlet downstream (see below) and give the domain a 
//     constant bathymetric slope (see DEVRIEND section of setdepth.f90)
   frictype             = 0

// C_manning:  manning (n) friction coefficient (only used if frictype == 2)
   C_manning            = 0.02

// fluxorder: order of the spatial flux
//    = 1 => 1st order
//    = 2 => 2nd order
   fluxorder            = 2

// transverse
//    = 0 => no transverse flux propagation
//    = 1 => transverse flux propagation, no corrections
//    = 2 => transverse flux propagation, with corrections
   transverse           = 2

// mindepth: set the minimum depth (if depth is < mindepth), velocities are set to zero
   mindepth             = 2.e-3


// sediment model parameters 
   // sedmodel: sediment model selector
   // = 0:  no sediment model
   // = 1:  track bed changes but do not update bathymetry (no morpho)
   // = 2:  track bed changes and update bathymetry (morpho)
   //
   // sedinit: start time for sediment model (allows for a ramp up of hydro before starting sediment)
   //
   // d50:  mean grain size in m 
   //
   // morphfactor: Lesser style "online" morphological acceleration [0, infinity]
   //   = 0:  no morphology
   //   = 1:  morphology is real time
   //   >1 :  morphology is accelerated

   sedmodel = 2
   sedinit  = 0.0
   d50      = .0002 
   morphfactor = 100.0

   Refinement_data {
//     refine_criteria = "DEPTH_GRADIENT"
     refine_criteria = "BATHY_GRADIENT"
//      refine_criteria = "BEDLEVEL_GRADIENT"
 
      BEDLEVEL_GRADIENT {
         grad_tol = .004 
         time_min = 43200.
      }
      DEPTH_GRADIENT {
         grad_tol = 1.e-4
      }
      BATHY_GRADIENT {
         grad_tol = 2.5e-3 
      }

      
   }

//     below - use dirichlet xhi if frictype above is 2
   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "DIRICHLET" 
         depth = 10.0
         bathy = 0.0
         bedlevel = 0.0
         veldepth = 10.,0.0
      }
//      boundary_edge_xhi {
//         boundary_condition      = "DIRICHLET"
//         depth = 10.0
//         bathy = -.0928 
//         bedlevel = 0.0
//         veldepth = 10.,0.0
//      }
      boundary_edge_xhi {
         boundary_condition      = "FLOW"    
      }
//      boundary_edge_xlo {
//         boundary_condition      = "FLOW"
//      }
//      boundary_edge_xhi {
//         boundary_condition      = "DIRICHLET" 
//         depth = 10.0
//         bathy = 0.0
//         bedlevel = 0.0
//         veldepth = -10.0,0.0
//      }
      boundary_edge_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_yhi {
         boundary_condition      = "REFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YREFLECT"
      }
   }
}

Main {
   dim = 2
   base_name = "swe"

// log file parameters 
   log_file_name    = "devriend.log"
   log_all_nodes    = TRUE

// matlab pencil file
   matlab_dump_interval  = 0
   matlab_dump_filename  = "pencil"
   matlab_dump_dirname   = "./pencil_devriend"
   matlab_pencil_direction = 0
 
// visualization dump parameters
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 500         // zero to turn off
   viz_dump_dirname      = "viz_devriend"
   viz_dump_filename     = "devriend"   // not used by VisIt
   visit_file_cluster_size = 1        // not used by Vizamrai

// restart dump parameters
   restart_interval       = 0         // zero to turn off
   restart_write_dirname  = "restart_room2d"
}

TimerManager{
   print_exclusive      = TRUE   // output exclusive time
   timer_list               = "apps::main::*",
                              "apps::swe::*",
                              "algs::GriddingAlgorithm::*",
                              "algs::HyperbolicLevelIntegrator::*"
}

CartesianGeometry {
//domain_boxes = [(0,0) , (63,3)] //useful for 1-D gaussian
//domain_boxes = [(0,0) , (99,49)]  //good for 3-level AMR
//domain_boxes = [(0,0) , (95,23)]  //good for 3-level AMR
//domain_boxes = [(0,0) , (95,49)]  //good for 3-level AMR
//domain_boxes = [(0,0) , (199,49)]  //
domain_boxes = [(0,0) , (99,24)]  //


// Lesser domains
   x_lo         = 0.e0 , 5000.e0   // lower end of computational domain.
  x_up         = 20000.0,  10000.0   // upper end of computational domain.
//   x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
//   x_up         = 20000.0,  10000.0   // upper end of computational domain.

// devriend domains (1000km x 500 or 1000km x 250)
//   x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
//   x_up         = 1000.0,  250.0   // upper end of computational domain.

}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy{
   max_levels          = 1        // Maximum number of levels in hierarchy.

   ratio_to_coarser {              // vector ratio to next coarser level
      level_1            = 4,  4
      level_2            = 4 , 4
   }

   largest_patch_size {
      level_0 = 224,24    
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 8 , 4
      level_1 = 8 , 4
      // all finer levels will use same values as level_0...
   }
}
GriddingAlgorithm {
   efficiency_tolerance = 0.95e0   // min % of tag cells in new patch level
   combine_efficiency   = 0.95e0   // chop box if sum of volumes of smaller
                                   // boxes < efficiency * vol of large box
}

HyperbolicLevelIntegrator{
   cfl                       = 0.5e0    // max cfl factor used in problem
   cfl_init                  = 0.1e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator{
   start_time           = 0.e0     // initial simulation time
//   end_time             = 1728000.   // final simulation time
   end_time             = 172800.    // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 30000000       // max number of simulation timesteps
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
