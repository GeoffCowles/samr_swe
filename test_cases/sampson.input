// dampbreak test 
// 

swe {
  
   data_problem         = "SAMPSON"   
   // control params

// frictype:  select the friction type
//   = 0 => no friction
//   = 1 => linear friction
//   = 2 => Manning style friction
   frictype             = 1

// C_manning:  manning (n) friction coefficient (only used if frictype == 2)
   C_manning            = 0.0

// fluxorder: order of the spatial flux
//    = 1 => 1st order
//    = 2 => 2nd order
   fluxorder            = 2

// transverse
//    = 0 => no transverse flux propagation
//    = 1 => transverse flux propagation, no corrections
//    = 2 => transverse flux propagation, with corrections
   transverse           = 0

// mindepth: set the minimum depth (if depth is < mindepth), velocities are set to zero
   mindepth             = 1.e-3


   Refinement_data {
      refine_criteria = "DEPTH_GRADIENT"
 
      DEPTH_GRADIENT {
         grad_tol = 0.02 
      }

      
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_yhi {
         boundary_condition      = "REFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YREFLECT"
      }
   }
}

Main {
   dim = 2
   base_name = "swe"

// log file parameters 
   log_file_name    = "sampson.log"
   log_all_nodes    = TRUE

// matlab pencil file
   matlab_dump_interval  = 20 
   matlab_dump_filename  = "pencil"
   matlab_dump_dirname   = "./pencil_sampson"
   matlab_pencil_direction = 0
 
// visualization dump parameters
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 100          // zero to turn off
   viz_dump_dirname      = "viz_sampson"
   viz_dump_filename     = "sampson"   // not used by VisIt
   visit_file_cluster_size = 1        // not used by Vizamrai

// restart dump parameters
   restart_interval       = 0         // zero to turn off
   restart_write_dirname  = "restart_room2d"
}

TimerManager{
   print_exclusive      = TRUE   // output exclusive time
   timer_list               = "apps::main::*",
                              "apps::swe::*",
                              "algs::GriddingAlgorithm::*",
                              "algs::HyperbolicLevelIntegrator::*"
}

CartesianGeometry{
   domain_boxes	= [(0,0),(199,4)]

   x_lo = -5000.e0 , 0.e0   // lower end of computational domain.
   x_up =  5000.e0 , 5000.e0 // upper end of computational domain.
}


StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy{    
   max_levels = 1         // Maximum number of levels in hierarchy.

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 2 , 1
      level_2 = 2 , 2
   }

//   max_levels = 1         // Maximum number of levels in hierarchy.
//
//   ratio_to_coarser {      // vector ratio to next coarser level
//      level_1 = 2 , 2
//   }

   largest_patch_size {
      level_0 = 200 , 200
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 8 , 4 
      level_1 = 4,  4 
      // all finer levels will use same values as level_1...
   }
}
GriddingAlgorithm{
   efficiency_tolerance    = 0.50e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.75e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

HyperbolicLevelIntegrator{
   cfl                       = 0.5e0    // max cfl factor used in problem
   cfl_init                  = 0.1e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator{
   start_time           = 0.e0     // initial simulation time
   end_time             = 6000e0  // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 3000      // max number of simulation timesteps
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
