// roelvink inlet test from Roelvink, J.A., Coastal Engineering 53, 2006, 277-287.
// 

swe {
  
   data_problem         = "ROELVINK"  

// frictype:  select the friction type
//   = 0 => no friction
//   = 1 => linear friction
//   = 2 => Manning style friction
   frictype             = 2

// C_manning:  manning (n) friction coefficient (only used if frictype == 2)
   C_manning            = 0.01 

// fluxorder: order of the spatial flux
//    = 1 => 1st order
//    = 2 => 2nd order
   fluxorder            = 2

// transverse
//    = 0 => no transverse flux propagation
//    = 1 => transverse flux propagation, no corrections
//    = 2 => transverse flux propagation, with corrections
   transverse           = 1

// mindepth: set the minimum depth (if depth is < mindepth), velocities are set to zero
   mindepth             = 1.e-3


// sediment model parameters 
   // sedmodel: sediment model selector
   // = 0:  no sediment model
   // = 1:  track bed changes but do not update bathymetry (no morpho)
   // = 2:  track bed changes and update bathymetry (morpho)
   //
   // sedinit: start time for sediment model (allows for a ramp up of hydro before starting sediment)
   //
   // taucrit: critical shear stress in N/m^2
   //
   // morphfactor: Lesser style "online" morphological acceleration [0, infinity]
   //   = 0:  no morphology
   //   = 1:  morphology is real time
   //   >1 :  morphology is accelerated

   sedmodel = 2
   sedinit  = 43200
   // sedinit  = 60  //bug, sedinit=0 crashes, something isn't initialized properly
   d50      = .0002  
   morphfactor = 10. 

   Refinement_data {
     refine_criteria = "DEPTH_GRADIENT"
//      refine_criteria = "BEDLEVEL_GRADIENT"
 
      BEDLEVEL_GRADIENT {
         grad_tol = .004 
         time_min = 43200.
      }
      DEPTH_GRADIENT {
         grad_tol = .005 
      }

      
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
//      boundary_edge_xlo {
//         boundary_condition      = "DIRICHLET" 
//         depth = 1.0
//         bathy = 0.0
//         veldepth = 0.0,0.0
//      }
      boundary_edge_xlo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_yhi {
         boundary_condition      = "REFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YREFLECT"
      }
   }
}

Main {
   dim = 2
   base_name = "swe"

// log file parameters 
   log_file_name    = "roelvink.log"
   log_all_nodes    = TRUE

// matlab pencil file
   matlab_dump_interval  = 0 
   matlab_dump_filename  = "pencil"
   matlab_dump_dirname   = "./pencil_roelvink"
   matlab_pencil_direction = 0
 
// visualization dump parameters
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 15700      // zero to turn off
   viz_dump_dirname      = "viz_roelvink"
   viz_dump_filename     = "roelvink"   // not used by VisIt
   visit_file_cluster_size = 1        // not used by Vizamrai

// restart dump parameters
   restart_interval       = 0         // zero to turn off
   restart_write_dirname  = "restart_room2d"
}

TimerManager{
   print_exclusive      = TRUE   // output exclusive time
   timer_list               = "apps::main::*",
                              "apps::swe::*",
                              "algs::GriddingAlgorithm::*",
                              "algs::HyperbolicLevelIntegrator::*"
}

CartesianGeometry {
//   domain_boxes = [ (0,0) , (9,13) ],
//	          [ (11,0) , (29,13) ],
//	          [ (0,14) , (29,17) ],
//	          [ (0,18) , (9,31) ],
//                  [ (11,18) , (29,31) ]
//   domain_boxes = [ (0,0) , (19,27) ],
//                  [ (21,0) , (59,27) ],
//                  [ (0,28) , (59,35) ],
//                  [ (0,36) , (19,63) ],
//                  [ (21,36) , (59,63) ]
//   domain_boxes = [ (0,0) , (19,27) ],
//                  [ (0,28), (20,35) ],
//                  [ (0,36), (19,63) ],
//                  [ (21,0), (59,63) ]

// two-cell inlet (one-cell inlet crashes AMR)
//   domain_boxes = [ (0,0) , (19,27) ],
//                  [ (0,28), (21,35) ],
//                  [ (0,36), (19,63) ],
//                  [ (22,0), (59,63) ]

// two-cell inlet (one-cell inlet crashes AMR) at higher res
//   domain_boxes = [ (0,0) , (39,55) ],
//                  [ (0,56), (41,71) ],
//                  [ (0,72), (39,127)],
//                  [ (42,0), (119,127) ]
//
// half an inlet 
//   domain_boxes = [ (0,0) , (41,7) ],
//                  [ (0,8), (39,63) ],
//                  [ (42,0), (119,63) ]


// coarse model testing (will crash with AMR)
//   domain_boxes = [ (0,0) , (10,1) ],
//                  [ (0,4) , (9,14) ], 
//                  [ (11,0), (29,14) ]
//

// 0.5 resolution, 1-cell inlet width, full domain
//domain_boxes = [ (0,0) , (9,12) ],
//               [ (0,13) , (10,16) ],
//               [ (0,17) , (9,29) ],
//               [ (11,0) , (29,29) ]

// 0.5 resolution, 1-cell inlet width, half domain
//domain_boxes = [ (0,0) , (10,1) ],
//               [ (0,2) , (9,14) ],
//               [ (0,17) , (9,29) ] 

// 0.5x0.25 resolution, 1-cell inlet width, half domain
//domain_boxes = [ (0,0) , (10,3) ],
//               [ (0,4) , (9,29) ],
//               [ (11,0) , (29,29) ] 
//x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
//x_up         = 15000, 7500   // upper end of computational domain.

// 0.5x0.25 resolution, 1-cell inlet width, full domain
//domain_boxes = [ (0,0) , (9,25) ],
//               [ (0,26) , (10,33) ],
//               [ (0,34) , (9,59) ],
//               [ (11,0) , (29,59) ]
//x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
//x_up         = 15000, 15000  // upper end of computational domain.

// .25 x .25 resolution, 1-cell inlet width, half domain
//domain_boxes = [ (0,0) , (20,3) ],
//               [ (0,4) , (19,29) ],
//               [ (21,0) , (59,29) ]
//x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
//x_up         = 15000, 7500   // upper end of computational domain.

// .125 x .125 resolution, 1-cell inlet width, half domain
domain_boxes = [ (0,0) , (40,7) ],
               [ (0,8) , (39,59) ],
               [ (41,0) , (119,59) ] 
x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
x_up         = 15000, 7500   // upper end of computational domain.

// .05 x .05 km resolution, 1-cell inlet width, half domain
//domain_boxes = [ (0,0) , (100,19) ],
//               [ (0,20) , (99,149) ],
//               [ (101,0) , (299,149) ] 
//x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
//x_up         = 15000, 7500   // upper end of computational domain.

}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy{
   max_levels          = 1        // Maximum number of levels in hierarchy.

   ratio_to_coarser {              // vector ratio to next coarser level
      level_1            = 2 , 2
      level_2            = 2 , 2
   }

   largest_patch_size {
      level_0 = 32 ,32 
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 2 , 2
      level_1 = 8 , 8
      // all finer levels will use same values as level_0...
   }
}
GriddingAlgorithm {
   efficiency_tolerance = 0.75e0   // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0   // chop box if sum of volumes of smaller
                                   // boxes < efficiency * vol of large box
}

HyperbolicLevelIntegrator{
   cfl                       = 0.5e0    // max cfl factor used in problem
   cfl_init                  = 0.1e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator{
   start_time           = 0.e0     // initial simulation time
   end_time             = 25920000.   // final simulation time
//   end_time             = 432000.     // final simulation time
//   end_time = 86400.
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 30000000       // max number of simulation timesteps
//   max_integrator_steps = 20              // max number of simulation timesteps
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
